<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ComfyUI Client</title>
    <style>
        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --secondary: #8b5cf6;
            --background: #0f172a;
            --surface: #1e293b;
            --surface-light: #334155;
            --text: #f8fafc;
            --text-dim: #94a3b8;
            --success: #10b981;
            --error: #ef4444;
            --warning: #f59e0b;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--background);
            color: var(--text);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        header {
            background: var(--surface);
            padding: 1rem 2rem;
            border-bottom: 1px solid var(--surface-light);
            box-shadow: 0 2px 10px rgba(0,0,0,0.5);
        }
        
        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            font-size: 1.5rem;
            font-weight: bold;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .connection-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: var(--error);
        }
        
        .status-dot.connected {
            background: var(--success);
        }
        
        main {
            flex: 1;
            padding: 2rem;
            max-width: 1200px;
            margin: 0 auto;
            width: 100%;
        }
        
        .connection-panel {
            background: var(--surface);
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.3);
        }
        
        .input-group {
            margin-bottom: 1rem;
        }
        
        label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--text-dim);
            font-size: 0.875rem;
        }
        
        input[type="text"], textarea, select {
            width: 100%;
            padding: 0.75rem 1rem;
            background: var(--surface-light);
            border: 1px solid transparent;
            border-radius: 8px;
            color: var(--text);
            font-size: 1rem;
            transition: all 0.2s;
        }
        
        input[type="text"]:focus, textarea:focus, select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }
        
        .button {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .button:hover {
            background: var(--primary-dark);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
        }
        
        .button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .workflow-section {
            display: none;
            gap: 2rem;
            grid-template-columns: 1fr 1fr;
        }
        
        .workflow-section.active {
            display: grid;
        }
        
        .category-tabs {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            border-bottom: 2px solid var(--surface-light);
        }
        
        .tab {
            padding: 1rem 2rem;
            background: none;
            border: none;
            color: var(--text-dim);
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            position: relative;
            transition: color 0.2s;
        }
        
        .tab:hover {
            color: var(--text);
        }
        
        .tab.active {
            color: var(--primary);
        }
        
        .tab.active::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            right: 0;
            height: 2px;
            background: var(--primary);
        }
        
        .workflow-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .workflow-card {
            background: var(--surface);
            padding: 1.5rem;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s;
            border: 2px solid transparent;
        }
        
        .workflow-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.3);
        }
        
        .workflow-card.selected {
            border-color: var(--primary);
        }
        
        .panel {
            background: var(--surface);
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.3);
        }
        
        .panel h3 {
            margin-bottom: 1.5rem;
            font-size: 1.25rem;
        }
        
        .file-input {
            position: relative;
            display: inline-block;
            width: 100%;
        }
        
        .file-input input[type="file"] {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }
        
        .file-input-label {
            display: block;
            padding: 2rem;
            background: var(--surface-light);
            border: 2px dashed var(--text-dim);
            border-radius: 8px;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .file-input-label:hover {
            border-color: var(--primary);
            background: rgba(99, 102, 241, 0.1);
        }
        
        .file-input-label.has-file {
            border-style: solid;
            border-color: var(--success);
        }
        
        .preview-image {
            max-width: 100%;
            max-height: 300px;
            object-fit: contain;
            margin: 1rem 0;
            border-radius: 8px;
        }
        
        .output-item {
            background: var(--surface-light);
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .output-preview {
            max-width: 100px;
            max-height: 100px;
            object-fit: cover;
            border-radius: 4px;
        }
        
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 4rem;
        }
        
        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid var(--surface-light);
            border-top-color: var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .error-message {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid var(--error);
            color: var(--error);
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
        }
        
        .success-message {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid var(--success);
            color: var(--success);
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
        }
        
        @media (max-width: 768px) {
            .workflow-section {
                grid-template-columns: 1fr;
            }
            
            .workflow-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="header-content">
            <h1 class="logo">ComfyUI Client</h1>
            <div class="connection-status">
                <div class="status-dot" id="statusDot"></div>
                <span id="statusText">Disconnected</span>
            </div>
        </div>
    </header>
    
    <main>
        <!-- Connection Panel -->
        <div class="connection-panel" id="connectionPanel">
            <h2 style="margin-bottom: 1.5rem;">Connect to Server</h2>
            <div class="input-group">
                <label for="apiUrl">API URL</label>
                <input type="text" id="apiUrl" placeholder="https://your-api.trycloudflare.com">
            </div>
            <div class="input-group">
                <label for="apiKey">API Key</label>
                <input type="text" id="apiKey" placeholder="Enter your API key">
            </div>
            <button class="button" id="connectBtn" onclick="connect()">
                <span>Connect</span>
            </button>
        </div>
        
        <!-- Workflow Section -->
        <div class="workflow-section" id="workflowSection">
            <div class="panel">
                <h3>Select Workflow</h3>
                
                <!-- Category Tabs -->
                <div class="category-tabs">
                    <button class="tab active" onclick="selectCategory('IMAGE')">Images</button>
                    <button class="tab" onclick="selectCategory('VIDEO')">Videos</button>
                </div>
                
                <!-- Workflow Grid -->
                <div class="workflow-grid" id="workflowGrid">
                    <!-- Workflows will be loaded here -->
                </div>
                
                <!-- Dynamic Inputs -->
                <div id="inputsContainer">
                    <!-- Inputs will be loaded based on workflow -->
                </div>
                
                <button class="button" id="generateBtn" onclick="generate()" style="margin-top: 2rem; width: 100%;">
                    Generate
                </button>
            </div>
            
            <div class="panel">
                <h3>Output</h3>
                <div id="outputContainer">
                    <p style="text-align: center; color: var(--text-dim);">
                        Results will appear here
                    </p>
                </div>
            </div>
        </div>
    </main>
    
    <script>
        // Global state
        let state = {
            apiUrl: '',
            apiKey: '',
            connected: false,
            workflows: { IMAGE: [], VIDEO: [] },
            selectedCategory: 'IMAGE',
            selectedWorkflow: null,
            workflowDetails: null,
            currentJob: null
        };
        
        // Load saved credentials
        window.onload = () => {
            const savedUrl = localStorage.getItem('comfyui_api_url');
            const savedKey = localStorage.getItem('comfyui_api_key');
            
            if (savedUrl) document.getElementById('apiUrl').value = savedUrl;
            if (savedKey) document.getElementById('apiKey').value = savedKey;
        };
        
        async function connect() {
            const url = document.getElementById('apiUrl').value.trim();
            const key = document.getElementById('apiKey').value.trim();
            
            if (!url || !key) {
                showError('Please enter both URL and API key');
                return;
            }
            
            // Normalize URL
            state.apiUrl = url.replace(/\/$/, '');
            state.apiKey = key;
            
            // Show loading
            const btn = document.getElementById('connectBtn');
            btn.disabled = true;
            btn.textContent = 'Connecting...';
            
            try {
                // Verify connection
                const response = await fetch(`${state.apiUrl}/api/verify`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ api_key: key })
                });
                
                if (!response.ok) {
                    throw new Error('Invalid API key or URL');
                }
                
                const data = await response.json();
                console.log('Connected:', data);
                
                // Save credentials
                localStorage.setItem('comfyui_api_url', state.apiUrl);
                localStorage.setItem('comfyui_api_key', state.apiKey);
                
                // Update UI
                state.connected = true;
                updateConnectionStatus(true);
                
                // Load workflows
                await loadWorkflows();
                
                // Show workflow section
                document.getElementById('connectionPanel').style.display = 'none';
                document.getElementById('workflowSection').classList.add('active');
                
            } catch (error) {
                console.error('Connection error:', error);
                showError(`Connection failed: ${error.message}`);
                updateConnectionStatus(false);
            } finally {
                btn.disabled = false;
                btn.textContent = 'Connect';
            }
        }
        
        function updateConnectionStatus(connected) {
            const dot = document.getElementById('statusDot');
            const text = document.getElementById('statusText');
            
            if (connected) {
                dot.classList.add('connected');
                text.textContent = 'Connected';
            } else {
                dot.classList.remove('connected');
                text.textContent = 'Disconnected';
            }
        }
        
        async function loadWorkflows() {
            try {
                const response = await fetch(`${state.apiUrl}/api/workflows`, {
                    headers: {
                        'X-API-Key': state.apiKey
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to load workflows');
                }
                
                state.workflows = await response.json();
                renderWorkflows();
                
            } catch (error) {
                console.error('Load workflows error:', error);
                showError('Failed to load workflows');
            }
        }
        
        function selectCategory(category) {
            state.selectedCategory = category;
            
            // Update tabs
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.toggle('active', tab.textContent.toUpperCase().includes(category));
            });
            
            renderWorkflows();
        }
        
        function renderWorkflows() {
            const container = document.getElementById('workflowGrid');
            container.innerHTML = '';
            
            const workflows = state.workflows[state.selectedCategory] || [];
            
            workflows.forEach(name => {
                const card = document.createElement('div');
                card.className = 'workflow-card';
                card.onclick = () => selectWorkflow(name);
                
                card.innerHTML = `
                    <h4>${formatWorkflowName(name)}</h4>
                    <p style="color: var(--text-dim); margin-top: 0.5rem;">
                        ${state.selectedCategory === 'IMAGE' ? '🖼️ Image' : '🎬 Video'} Workflow
                    </p>
                `;
                
                container.appendChild(card);
            });
        }
        
        function formatWorkflowName(name) {
            return name.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        }
        
        async function selectWorkflow(name) {
            state.selectedWorkflow = name;
            
            // Update UI
            document.querySelectorAll('.workflow-card').forEach(card => {
                card.classList.toggle('selected', 
                    card.querySelector('h4').textContent === formatWorkflowName(name));
            });
            
            // Load workflow details
            try {
                const response = await fetch(
                    `${state.apiUrl}/api/workflow/${state.selectedCategory}/${name}`,
                    {
                        headers: {
                            'X-API-Key': state.apiKey
                        }
                    }
                );
                
                if (!response.ok) {
                    throw new Error('Failed to load workflow details');
                }
                
                state.workflowDetails = await response.json();
                renderInputs();
                
            } catch (error) {
                console.error('Load workflow error:', error);
                showError('Failed to load workflow details');
            }
        }
        
        function renderInputs() {
            const container = document.getElementById('inputsContainer');
            container.innerHTML = '<h4 style="margin: 2rem 0 1rem;">Inputs</h4>';
            
            if (!state.workflowDetails || !state.workflowDetails.inputs) {
                container.innerHTML += '<p>No inputs required</p>';
                return;
            }
            
            state.workflowDetails.inputs.forEach(input => {
                const div = document.createElement('div');
                div.className = 'input-group';
                
                if (input.type === 'text') {
                    div.innerHTML = `
                        <label for="${input.name}">${input.label}</label>
                        <textarea 
                            id="${input.name}" 
                            rows="3"
                            placeholder="Enter ${input.label.toLowerCase()}..."
                        >${input.default || ''}</textarea>
                    `;
                } else if (input.type === 'image') {
                    div.innerHTML = `
                        <label>${input.label}</label>
                        <div class="file-input">
                            <input 
                                type="file" 
                                id="${input.name}" 
                                accept="image/*"
                                onchange="handleFileSelect(event, '${input.name}')"
                            >
                            <label for="${input.name}" class="file-input-label" id="label_${input.name}">
                                Click to select image or drag & drop
                            </label>
                        </div>
                        <div id="preview_${input.name}"></div>
                    `;
                }
                
                container.appendChild(div);
            });
        }
        
        function handleFileSelect(event, inputName) {
            const file = event.target.files[0];
            if (!file) return;
            
            // Update label
            const label = document.getElementById(`label_${inputName}`);
            label.textContent = file.name;
            label.classList.add('has-file');
            
            // Show preview
            const reader = new FileReader();
            reader.onload = (e) => {
                const preview = document.getElementById(`preview_${inputName}`);
                preview.innerHTML = `
                    <img src="${e.target.result}" class="preview-image" alt="Preview">
                `;
            };
            reader.readAsDataURL(file);
        }
        
        async function generate() {
            if (!state.selectedWorkflow) {
                showError('Please select a workflow');
                return;
            }
            
            const inputs = {};
            
            // Collect inputs
            state.workflowDetails.inputs.forEach(input => {
                if (input.type === 'text') {
                    const value = document.getElementById(input.name).value;
                    inputs[input.name] = value;
                } else if (input.type === 'image') {
                    // For images, we'd need to upload first
                    // This is simplified - in production you'd upload to server
                    const file = document.getElementById(input.name).files[0];
                    if (file) {
                        // Would need to handle file upload here
                        console.log('File selected:', file.name);
                    }
                }
            });
            
            // Show loading
            const outputContainer = document.getElementById('outputContainer');
            outputContainer.innerHTML = `
                <div class="loading">
                    <div class="spinner"></div>
                </div>
                <p style="text-align: center; margin-top: 1rem;">Generating...</p>
            `;
            
            try {
                // Send generation request
                const response = await fetch(`${state.apiUrl}/api/generate`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-API-Key': state.apiKey
                    },
                    body: JSON.stringify({
                        category: state.selectedCategory,
                        workflow: state.selectedWorkflow,
                        inputs: inputs
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to start generation');
                }
                
                const data = await response.json();
                state.currentJob = data;
                
                // Start polling for results
                pollForResults();
                
            } catch (error) {
                console.error('Generation error:', error);
                showError(`Generation failed: ${error.message}`);
                outputContainer.innerHTML = '<p style="color: var(--error);">Generation failed</p>';
            }
        }
        
        async function pollForResults() {
            if (!state.currentJob || !state.currentJob.prompt_id) return;
            
            try {
                const response = await fetch(
                    `${state.apiUrl}/api/status/${state.currentJob.prompt_id}`,
                    {
                        headers: {
                            'X-API-Key': state.apiKey
                        }
                    }
                );
                
                if (!response.ok) {
                    throw new Error('Failed to check status');
                }
                
                const data = await response.json();
                
                if (data.status === 'completed') {
                    displayResults(data.outputs);
                } else if (data.status === 'failed') {
                    showError('Generation failed');
                    document.getElementById('outputContainer').innerHTML = 
                        '<p style="color: var(--error);">Generation failed</p>';
                } else {
                    // Continue polling
                    setTimeout(pollForResults, 2000);
                }
                
            } catch (error) {
                console.error('Poll error:', error);
                // Retry
                setTimeout(pollForResults, 5000);
            }
        }
        
        function displayResults(outputs) {
            const container = document.getElementById('outputContainer');
            container.innerHTML = '';
            
            if (!outputs || outputs.length === 0) {
                container.innerHTML = '<p>No outputs generated</p>';
                return;
            }
            
            outputs.forEach(output => {
                const div = document.createElement('div');
                div.className = 'output-item';
                
                if (output.type === 'image') {
                    div.innerHTML = `
                        <img 
                            src="${state.apiUrl}/api/download/${output.filename}?api_key=${state.apiKey}" 
                            class="output-preview"
                            alt="Output"
                        >
                        <div>
                            <p>${output.filename}</p>
                            <button class="button" onclick="downloadFile('${output.filename}')">
                                Download
                            </button>
                        </div>
                    `;
                } else if (output.type === 'video') {
                    div.innerHTML = `
                        <video 
                            src="${state.apiUrl}/api/download/${output.filename}?api_key=${state.apiKey}" 
                            class="output-preview"
                            controls
                        ></video>
                        <div>
                            <p>${output.filename}</p>
                            <button class="button" onclick="downloadFile('${output.filename}')">
                                Download
                            </button>
                        </div>
                    `;
                }
                
                container.appendChild(div);
            });
        }
        
        async function downloadFile(filename) {
            try {
                const response = await fetch(
                    `${state.apiUrl}/api/download/${filename}`,
                    {
                        headers: {
                            'X-API-Key': state.apiKey
                        }
                    }
                );
                
                if (!response.ok) {
                    throw new Error('Download failed');
                }
                
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                
            } catch (error) {
                console.error('Download error:', error);
                showError('Download failed');
            }
        }
        
        function showError(message) {
            // You could implement a toast notification here
            alert(message);
        }
        
        function showSuccess(message) {
            // You could implement a toast notification here
            console.log('Success:', message);
        }
    </script>
</body>
</html>
